# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: TaskManager GUI CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Checkout submodules as well
    - name: Checkout repository with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive  # Clones submodules too
   
    # Install .NET SDK
    - name: Install .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x 

    # Restore Dependencies
    - name: Restore Dependencies
      run: dotnet restore TaskManagerGUI.sln

    # Build Project
    - name: Build Project
      run: dotnet build TaskManagerGUI.sln --configuration ${{ matrix.configuration }} --no-restore

    # Run Unit Tests
    - name: Run Tests
      run: dotnet test TaskManagerGUI.sln --configuration ${{ matrix.configuration }} --no-build --logger "trx;LogFileName=test-results.trx"

    # Upload Test Results (Optional)
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: Test Results
        path: TestResults/test-results.trx

    # Publish Application (For Release Build Only)
    - name: Publish Application
      if: matrix.configuration == 'Release'
      run: dotnet publish TaskManagerGUI.sln -c Release -o publish/

    # Upload Build Artifacts (Executable Files)
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Published App
        path: publish/


